"""
Script to plot some trials of the epoched traces and to show the trial onsets in relation to the whole fluorescence trace to ensure the epoching makes sense.
INPUT: epoched_traces.npy (nCells x nTrials x nFrames array), raw_corrected_traces (nCells x nFrames array, i.e. not epoched), onsets.npy
AUTHOR: Veronica Tarka, May 2022, veronica.tarka@mail.mcgill.ca
"""

import matplotlib.pyplot as plt
import numpy as np
import random
import json
import os

# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'/../../config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
RECORDING_FRAMERATE = config['RecordingFR']
EPOCH_START_IN_MS = config['EpochStart']

N_TRIAL_SAMPLES = 20 # number of trials (randomly selected) to show 
N_CELL_SAMPLES = 60 # number of cells (randomly selected) to show

CELL_TO_PLOT = 1 # ID of the cell you want to see the entire trace of

"""
Plots a column of subplots where each subplot is a trial, populated with lines represented a single cell's activity during that trial.
The trials are randomly sampled from all the trials.
@param epoched_traces: nCell x nTrial x nFrame array of dF/F values of each trial
@param y_limit: how tall to make the y-axis on each subplot (depends on how much signal there was in the recording)
"""
def plot_trials(epoched_traces,y_limit):
    # make sure the number of trial samples is an even number
    n_trial_samples = N_TRIAL_SAMPLES
    if (n_trial_samples % 2 != 0):
        n_trial_samples += 1

    # make figure
    _, axs = plt.subplots(nrows=int(n_trial_samples/2), ncols=2)
    axs=axs.ravel()

    # get a random sampling of 10 cells
    cell_sample = random.sample(range(len(epoched_traces)),N_CELL_SAMPLES)

    # get a random sampling of trials
    trial_sample = random.sample(range(len(epoched_traces[0])),n_trial_samples)

    # figure out how many frames were pre-stimulus
    n_baseline_frames = int((EPOCH_START_IN_MS/-1000*RECORDING_FRAMERATE)-1)

    # for each trial in the sample
    for row,trial in zip(range(len(axs)),trial_sample):

        # for each cell we've sampled
        for cell in cell_sample:
            axs[row].plot(epoched_traces[cell,trial,:]) # plot the trial

        # if this is the first row, add a title
        if row == 0:
            axs[row].set_title("Random sampling of cells and trials from the current recording")
            
        if row != (len(axs)-2): # unless this is the last row, hide the axes
            axs[row].get_xaxis().set_visible(False)
            axs[row].get_yaxis().set_visible(False)
        else: # if it's the last row, add some info so we know what we're looking at
            axs[row].set_xlabel("Time since stimulus onset (ms)")
            axs[row].set_xticks(range(0,len(epoched_traces[cell,trial,:]),2))
            axs[row].set_xticklabels(range(0-n_baseline_frames*100,(len(epoched_traces[cell,trial,:])-n_baseline_frames)*100,200))
            axs[row].set_ylabel("dF/F")

        # add a line to show exactly where stimulus happened
        # epoching started 100 ms before the trigger
        # so have an extra 0.1s * RECORDING_FRAMERATE frames before the trigger
        axs[row].axvline(x=n_baseline_frames)
        axs[row].autoscale(enable=True, axis='x', tight=True)
        
        # set the limits on the y axis
        axs[row].set_ylim([0,y_limit])
        axs[row].set_yticks([y_limit/2])
        
    plt.show(block=False) # show figure at the end of the script executing

"""
Plots the entire fluorescence trace for a single cell broken into 5 subplots (such that the start of one subplot matches the end of the previous)
@param single_cell_fl: the fluorescence trace for a single cell (nFrames x 1 array)
@param onsets: a list of every frame where a trigger occured
@param y_limit: how tall the y-axis of each subplot should be (will varying depending on the strength of the signal in the recording)
"""
def plot_all_traces(single_cell_fl,onsets,y_limit):

    # break the plot into 5 subplots since the whole trace is rather long
    _, axs = plt.subplots(nrows=5, ncols=1)

    onsets = onsets.astype(int) # convert the onsets to integers
    fl_sub_lengths = int(np.floor(len(single_cell_fl)/5)) # how many frames will go in each subplot
    fl_frames = range(len(single_cell_fl)) # explictly define the frames that match the fluorescence trace

    for row in range(len(axs)):
        # plot the right range of the fluorescence trace
        axs[row].plot(fl_frames[row*fl_sub_lengths:(row+1)*fl_sub_lengths],single_cell_fl[row*fl_sub_lengths:(row+1)*fl_sub_lengths],'r')

        # find the onsets that occurred within this range of the fluo trace
        onsets_in_range = onsets[np.where((onsets>fl_frames[row*fl_sub_lengths]) & (onsets<fl_frames[(row+1)*fl_sub_lengths]))]
        axs[row].vlines(x=onsets_in_range,ymin=0,ymax=y_limit)

        # formatting
        axs[row].autoscale(enable=True, axis='x', tight=True)
        axs[row].autoscale(enable=True, axis='y', tight=True)

        if row != len(axs)-1: # unless this is the last row, hide the axes
            axs[row].get_yaxis().set_visible(False)
        else: # if it's the last row, add some info so we know what we're looking at
            axs[row].set_xlabel("Frame (10 Hz)")

    plt.ylabel("dF/F")
    plt.show(block=False)

def main():
    # load epoched traces (part of the output of epoch_recording.py)
    epoched_traces = np.load(BASE_PATH+"epoched_traces.npy",allow_pickle=True)
    raw_traces = np.load(BASE_PATH+"raw_corrected_traces.npy",allow_pickle=True)
    onsets = np.load(BASE_PATH+"onsets.npy",allow_pickle=True)

    plot_trials(epoched_traces,3000)
    plot_all_traces(raw_traces[CELL_TO_PLOT,:],onsets,3000)
    plt.show()

if __name__=='__main__':
    main()