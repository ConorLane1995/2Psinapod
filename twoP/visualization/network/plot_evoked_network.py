"""
Script to plot the network formed by cell-to-cell correlations (correlation>threshold is shown as an edge)
INPUT: corrcoefs.pkl (file with correlation matrix for all the cells), recording_info.pkl, cell_dictionary.pkl
AUTHOR: Veronica Tarka, July 2022, veronica.tarka@mail.mcgill.ca
"""

import matplotlib.pyplot as plt
import numpy as np
import json
import os
import pickle
import networkx as nx
from itertools import count

# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'/../../config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
CELL_DICT_FILE = config['AnalysisFile']

HIST_THRESHOLD = 0.2 # threshold for a correlation to be counted in the histogram
GRAPH_THRESHOLD = 0.3 # threshold for a correlation between two cells to appear as an edge between the two nodes (cells) in the graph

"""
@param cell_tuning: the contents of the 'tuning' key in the big cell dictionary (as created by get_tuning.py)
@param freqs: every frequency presented during the recording in ascending order
@return the frequency that evoked the maximum median response across intensities
"""
def get_node_BF(cell_tuning,freqs):
    median_across_itsies = np.median(cell_tuning, axis=1)
    max_response_idx = np.argmax(median_across_itsies)
    return freqs[max_response_idx]

def main():

    # load the correlation file
    with open(BASE_PATH+"corrcoefs.pkl",'rb') as f:
        coeffs = pickle.load(f)

    # load the recording info file
    with open(BASE_PATH+"recording_info.pkl","rb") as f:
        recording_info = pickle.load(f)

    # load our dictionary (this NEEDS to have the x and y keys added for every cell (get_coordinates.py))
    with open(BASE_PATH + CELL_DICT_FILE, 'rb') as f:
        cell_dict = pickle.load(f)

    # set the auto-correlations to 0 (don't care about cells being perfectly correlated with themselves)
    coeffs[coeffs>0.99] = 0

    # make our graph
    g = nx.Graph()
    c = coeffs

    frequencies = recording_info['frequencies']

    # get a list of every cell in the dictionary
    cell_IDs_list = list(cell_dict.keys())

    # make our graph
    BFs = []
    hist_correlations = []
    for cell_idx_i in range(len(c)):
        for cell_idx_j in range(len(c)):

            if c[cell_idx_i,cell_idx_j] > HIST_THRESHOLD:
                hist_correlations.append(c[cell_idx_i,cell_idx_j])

            if c[cell_idx_i,cell_idx_j] > GRAPH_THRESHOLD:

                cell1_ID = cell_IDs_list[cell_idx_i]
                cell1_x = cell_dict[cell1_ID]['x'] # x coordinate in the field of view
                cell1_y = cell_dict[cell1_ID]['y'] # y coordinate in the field of view
                this_BF = get_node_BF(cell_dict[cell1_ID]['tuning'],frequencies)

                # add the first node to the graph
                g.add_node(cell1_ID,pos = (cell1_x,cell1_y),freq=this_BF)
                BFs.append(this_BF) # keep track of the BFs we are adding
                
                cell2_ID = cell_IDs_list[cell_idx_j]
                cell2_x = cell_dict[cell2_ID]['x']
                cell2_y = cell_dict[cell2_ID]['y']
                this_BF = get_node_BF(cell_dict[cell2_ID]['tuning'],frequencies)

                # add the second node to the graph
                g.add_node(cell2_ID,pos = (cell2_x,cell2_y),freq=this_BF)
                BFs.append(this_BF)

                # add an edge between the two nodes
                g.add_edge(cell1_ID,cell2_ID)
                
    print("Number of dictionary keys: ")
    print(len(cell_dict.keys()))

    print("Number of graph nodes: ")
    print(g.number_of_nodes())

    groups = set(nx.get_node_attributes(g,'freq').values())
    mapping = dict(zip(sorted(groups),count()))
    nodes = g.nodes()
    colors = [mapping[g.nodes[n]['freq']] for n in nodes]

    plt.figure(1)
    plt.title('Post-Psilocybin Correlated Spontaneous Activity (c>{})'.format(GRAPH_THRESHOLD))
    pos = nx.get_node_attributes(g,'pos') # or pos = nx.circular_layout(g) #if you want them arranged in a circle rather than in anatomical position
    ec = nx.draw_networkx_edges(g,pos,alpha=0.2)
    nc = nx.draw_networkx_nodes(g, pos, nodelist=nodes,node_color=colors,node_size=100, cmap=plt.cm.jet_r)
    cbar = plt.colorbar(nc,ticks=range(len(mapping)))
    cbar.ax.set_yticklabels(mapping.keys())
    cbar.ax.set_title("Best Frequency (Hz)")
    plt.text(s='Number of nodes: {}'.format(g.number_of_nodes()),y=-1,x=-1)
    plt.axis('off')
    plt.show(block=False)

    # TODO: format these two graphs to make them prettier
    plt.figure(2)
    plt.hist(hist_correlations,density=True)
    plt.xlabel("Correlation")
    plt.ylabel("Normalized number of correlations")
    plt.title("Post-psilocybin Correlations")
    plt.show(block=False)

    plt.figure(3)
    plt.hist(BFs,density=True)
    plt.show()

if __name__=="__main__":
    main()