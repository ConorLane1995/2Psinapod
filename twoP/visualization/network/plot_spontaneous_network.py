""" 
TODO format all
"""


import matplotlib.pyplot as plt
import json
import os
import pickle
import networkx as nx

# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'/../../config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
CELL_DICT_FILE = config['AnalysisFile']

HIST_THRESHOLD = 0.2 # threshold for a correlation to be counted in the histogram
GRAPH_THRESHOLD = 0.3 # threshold for a correlation between two cells to appear as an edge between the two nodes (cells) in the graph

def plot_events(cell_trace,events):
    for i in range(len(events[0])):
        plt.axvline(x=events[0][i])
    
    plt.plot(cell_trace,linewidth=2,color='black')
    plt.show()

def main():

    # load the file with the correlations matrix in it
    with open(BASE_PATH+"corrcoefs.pkl",'rb') as f:
        coeffs = pickle.load(f)

    # load our dictionary 
    with open(BASE_PATH + CELL_DICT_FILE, 'rb') as f:
        cell_dict = pickle.load(f)

    # ignore correlations of a cell with itself (always going to be 1)
    coeffs[coeffs>0.99] = 0

    g = nx.Graph()
    c = coeffs

    cell_IDs_list = list(cell_dict.keys())

    correlations = []
    for cell_idx_i in range(len(c)):
        for cell_idx_j in range(len(c)):
            if c[cell_idx_i,cell_idx_j] > HIST_THRESHOLD:
                correlations.append(c[cell_idx_i,cell_idx_j])

            if c[cell_idx_i,cell_idx_j] > GRAPH_THRESHOLD:

                cell1_ID = cell_IDs_list[cell_idx_i]
                cell1_x = cell_dict[cell1_ID]['x']
                cell1_y = cell_dict[cell1_ID]['y']
                g.add_node(cell1_ID,pos = (cell1_x,cell1_y))

                cell2_ID = cell_IDs_list[cell_idx_j]
                cell2_x = cell_dict[cell2_ID]['x']
                cell2_y = cell_dict[cell2_ID]['y']
                g.add_node(cell2_ID,pos = (cell2_x,cell2_y))

                g.add_edge(cell1_ID,cell2_ID)

            # add the cell even if it isn't correlated so we make sure to include cells who aren't correlated with any others  
            # if you only want cells that are correlated with at least one other cell, you can comment out this entire else block
            else:
                cell_ID = cell_IDs_list[cell_idx_i]
                cell_x = cell_dict[cell_ID]['x']
                cell_y = cell_dict[cell_ID]['y']
                g.add_node(cell_ID,pos=(cell_x,cell_y),color="red")

    node_color = []
    for node in g:
        # color the nodes that aren't connected to any other nodes black
        if g.degree(node) == 0 :
            node_color.append('black')
        else:
            node_color.append('red')

    print("Number of connected components: ")
    print(nx.number_connected_components(g))
    print("Number total edges: ")
    print(g.number_of_edges())
    print("Number of nodes: ")
    print(g.number_of_nodes())

    plt.figure(1)
    plt.title('Post-Psilocybin Correlated Spontaneous Activity (c>{})'.format(GRAPH_THRESHOLD))
    pos = nx.get_node_attributes(g,'pos') #  or pos = nx.circular_layout(g) if you want a circular layout
    nx.draw(g,pos,node_color=node_color)
    plt.show(block=False)

    plt.figure(2)
    plt.hist(correlations,density=True)
    plt.xlabel("Correlation")
    plt.ylabel("Normalized number of correlations")
    plt.title("Post-saline Correlations")
    plt.show()

if __name__=="__main__":
    main()