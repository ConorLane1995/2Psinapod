"""
TODO
"""

import matplotlib.pyplot as plt
import numpy as np
import json
import os

# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'/../../config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
RECORDING_FRAMERATE = config['RecordingFR']
EPOCH_START_IN_MS = config['EpochStart']

SPIKE_THRESHOLD = 500

"""
Helper method to binarize the fluorescence trace (make every frame above threshold a 1 and everything else is 0)
@param cell_trace: nTrials x nFrames array of the activity for a single cell
@return cell_trace: binarized cell_trace with a 1 for every frame where the original fluorescence trace was above SPIKE_THRESHOLD
"""
def get_spike_train(cell_trace):
    cell_trace[cell_trace<SPIKE_THRESHOLD] = 0
    cell_trace[cell_trace>SPIKE_THRESHOLD] = 1
    return cell_trace

"""
Turn the epoched fluorescence traces into binarized traces 
@calls get_spike_train
@param epoched_traces: nCells x nTrials x nFrames array of the activity of each cell
@return raster_matrix: nCells x nFrames array of the binarized activity for each trial concatenated together
"""
def get_raster_matrix(epoched_traces):

    # pre-initalize space
    raster_matrix = np.zeros((len(epoched_traces),len(epoched_traces[1,:])))    

    # and count each frame above the threshold as 1
    for cell_idx in range(len(epoched_traces)):
        raster_matrix[cell_idx,:] = get_spike_train(epoched_traces[cell_idx,:])

    return raster_matrix

"""
Plots a raster for all cells in the entire recording
@param raster_matrix: the output of get_raster_matrix (binarized and concatenated trials)
@param onsets: a list of frames where the onsets occured)
"""
def plot_raster(raster_matrix,onsets):

    # break the plot into 5 subplots since the whole trace is rather long
    _, axs = plt.subplots(nrows=5, ncols=1)

    # BUG the onsets here should not be a list of frames where the onsets occured but rather should occur every epoch_length frames since we're working with concatenated trials and not the original trace
    onsets = onsets.astype(int) # convert the onsets to integers
    raster_sub_len = int(np.floor(len(raster_matrix[0])/5))
    frames = range(len(raster_matrix[0]))

    for ax,ctr in zip(axs,range(len(axs))):

        for cell,row in zip(raster_matrix,range(len(raster_matrix))):
            sub_sect = cell[raster_sub_len*ctr:raster_sub_len*(ctr+1)]
            raster = np.where(sub_sect==1)[0] + frames[ctr*raster_sub_len]
            ax.scatter(raster,np.ones(len(raster))*row,marker="s",color="k",linewidths=1.5,alpha=0.7,s=2)

            # find the onsets that occurred within this range of the fluo trace
            onsets_in_range = onsets[np.where((onsets>frames[ctr*raster_sub_len]) & (onsets<frames[(ctr+1)*raster_sub_len]))]
            ax.vlines(x=onsets_in_range,ymin=0,ymax=len(raster_matrix),lw=0.5)

            # formatting
            ax.autoscale(enable=True, axis='x', tight=True)
            ax.autoscale(enable=True, axis='y', tight=True)

            if ctr != len(axs)-1: # unless this is the last row, hide the axes
                ax.get_yaxis().set_visible(False)
            else: # if it's the last row, add some info so we know what we're looking at
                ax.set_xlabel("Frame (10 Hz)")

    plt.ylabel("Cell #")
    plt.show(block=False)

def main():
    raw_traces = np.load(BASE_PATH+"raw_corrected_traces.npy",allow_pickle=True)
    onsets = np.load(BASE_PATH+"onsets.npy",allow_pickle=True)

    raster_matrix = get_raster_matrix(raw_traces)

    plot_raster(raster_matrix,onsets)

    plt.show()

if __name__=="__main__":
    main()