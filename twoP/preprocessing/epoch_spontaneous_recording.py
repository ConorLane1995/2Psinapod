"""
Script to take the files produced from the Suite2P preprocessing software and format for remainder of the analysis.
INPUT: Suite2P files (F.npy, Fneu.npy, iscell.npy)
OUTPUT: dictionary where each cell is a key containing the fluorescence trace for the session
AUTHOR: Veronica Tarka, January 2022, veronica.tarka@mail.mcgill.ca
"""

import matplotlib.pyplot as plt
import numpy as np
import os
import pickle
import json

# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'/../../config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
OUTPUT_PATH = config['AnalysisFile'] # name of the file that all of the analysis is getting saved in (tuning, best frequency, etc)

"""
Convert the fluorescence traces from an array to a dictionary
@param traces: nCells x nFrames array with the fluorescence over the entire session 
@param iscell_logigical: nCells x 1 vector with 1 or 0 value to designate whether the ROI is a cell (1) or not (0)
@return dict_of_cells: dictionary where each cell is a key containing a subdictionary with the fluorescence trace for the entire session
"""
def format_all_cells(traces,iscell_logical):

    # find the label for each ROI by finding this indices where iscell_logical is 1
    ROI_indices = (iscell_logical[:,0] == 1).nonzero()
    ROI_indices = ROI_indices[0] # extracting the first part of the tuple
    cell_IDs = ROI_indices + 1 # add 1 so we don't have zero indexing

    # make a dictionary from this list
    dict_of_cells = dict.fromkeys(cell_IDs)

    # for each cell
    # format the dictionary so we get this structure:
    # cell_n{ 
    #     'traces'{
    #         [x,x,x,x,...] }}

    for cell_idx in range(len(cell_IDs)):
        dict_of_cells[cell_IDs[cell_idx]] = {'traces': traces[cell_idx,:]}
    
    return dict_of_cells

def main():

    # load our files that were generated by Suite2P and the stim files
    fluorescence_trace = np.load(BASE_PATH + "spks.npy",allow_pickle=True) # uncorrected trace of dF/F
    neuropil_trace = np.load(BASE_PATH + "Fneu.npy",allow_pickle=True) # estimation of background fluorescence
    iscell_logical = np.load(BASE_PATH + "iscell.npy",allow_pickle=True) # Suite2P's estimation of whether each ROI is a cell or not

    # account for the neuropil (background fluorescence)
    corrected_fluo = fluorescence_trace #- 0.7*neuropil_trace
    
    # get fluorescence traces for the ROIs that are actually cells
    fluo_in_cells = corrected_fluo[np.where(iscell_logical[:,0]==1)[0],:]

    dictionary_of_cells = format_all_cells(fluo_in_cells,iscell_logical)

    # save to the provided output path
    with open(BASE_PATH+OUTPUT_PATH,'wb') as f:
        pickle.dump(dictionary_of_cells,f)

if __name__=='__main__':
    main()