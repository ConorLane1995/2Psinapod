"""
Applies rolling-window average smoothing to the trial data in the big dictionary, for each cell
The smoothed traces can either overwrite the original traces or be saved as a new key by adjusting the key name in line 53
INPUT: cell_dictionary
OUTPUT: cell_dictionary with smoothed trial data
AUTHOR: Veronica Tarka, May 2022, veronica.tarka@mail.mcgill.ca
"""

import numpy as np
import pickle
import json
import os

# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'\..\..\config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
CELL_DICT_FILE = config['AnalysisFile']
OUTPUT_FILE = CELL_DICT_FILE

"""
Function to apply rolling-average smoothing to a vector of numbers
@param a: the vector to be smoothed
@param n: the number of frames to include in the rolling average
@return the smoothed vector 
"""
def moving_average(a, n=3) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n

"""
Takes the contents of 'traces' in the big dictionary and returns the same structure but now containing smoothed trials
@param cell_traces: contents of 'traces' key, should be formatted as freq_f{ itsy_i { rep_r{ [x,x,x,...]}}}
@return cell_traces: nested dictionary formatted the same as the input param but now containing smoothed trial data
"""
def smooth_individual_cell(cell_traces):
    for freq in cell_traces:
        for intensity in cell_traces[freq]:
            for trial in cell_traces[freq][intensity]:
                cell_traces[freq][intensity][trial] = moving_average(cell_traces[freq][intensity][trial])

    return cell_traces

def main():
    # load the cell dictionary
    with open(BASE_PATH + CELL_DICT_FILE, 'rb') as f:
        cell_dictionary = pickle.load(f)

    # smooth the trial data for each cell
    for cell in cell_dictionary:
        cell_dictionary[cell]['traces'] = smooth_individual_cell(cell_dictionary[cell]['traces'])

    # save the dictionary now with smoothed traces
    with open(BASE_PATH+OUTPUT_FILE,'wb') as f:
        pickle.dump(cell_dictionary,f)

if __name__=='__main__':
    main()