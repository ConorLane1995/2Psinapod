"""
Script to find which of the cells that were recorded are actually active.
INPUT: Dictionary with the epoched traces
OUTPUT: Same dictionary but now with an added key "active" that holds a boolean
AUTHOR: Veronica Tarka, January 2022, veronica.tarka@mail.mcgill.ca
"""

from tkinter import N
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pickle
from scipy.stats import zscore
import json
import sys
import os
sys.path.append(os.path.abspath(os.path.dirname(__file__)) + '..\..\\')
from utils import get_avg_trace

# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'\..\..\config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
traces_file = config['AnalysisFile']
output_file = traces_file
FRAMERATE = config['RecordingFR']
EPOCH_START_IN_MS = config['EpochStart']
EPOCH_END_IN_MS = config['EpochEnd']

STD_THRESHOLD = 4 # number of standard deviations from baseline the peak response must be in order for the cell to be considered active
ZSCORE_THRESHOLD = 2 # number of zscores from the mean that the peak response must be from baseline in order for the cell to be considered active

def get_high_intensity_avg(cell_trace):
    # cell_trace is going to be all the trials of this one cell
    # {freq: intensity: repetition: trace = [x,x,x,x,...]}}}

    # first we need to find how much space to allocate
    n_samples = 0
    n_trials = 0
    for freq in cell_trace:
        highest_intensity = list(cell_trace[freq])[-1]
        for repetition in cell_trace[freq][highest_intensity]:
            if n_trials == 0:
                n_samples = len(cell_trace[freq][highest_intensity][repetition])
            n_trials += 1
              
    summed_traces = np.zeros(shape=(n_trials,n_samples))

    counter = 0
    # let's get a sum of all our traces to average later
    for freq in cell_trace:
        highest_intensity = list(cell_trace[freq])[-1]
        for repetition in cell_trace[freq][highest_intensity]:
            trace = cell_trace[freq][highest_intensity][repetition]
            summed_traces[counter,:] = trace
            counter += 1

    return np.average(summed_traces,axis=0)

# Method to check whether a cell is active based on number of STDs from baseline
def check_cell_STD(cell_trace,n_baseline_frames):

    this_cell_trace = get_avg_trace(cell_trace)

    # get the baseline for this trial
    baseline = this_cell_trace[0:n_baseline_frames]
    response = this_cell_trace[n_baseline_frames:]

    # get our threshold
    peak_threshold = np.mean(baseline) + STD_THRESHOLD*np.std(baseline)

    # get the peak response
    peak_response = np.amax(response)

    # get the index of the peak response
    peak_response_idx = np.argmax(response)

    # if our peak response was above our threshold, increase the counter
    if (peak_response >= peak_threshold) and (peak_response_idx < 10):
        return True
    else:
        return False

# Method to check if cell is active based on number of z-scores from baseline
def check_cell_zscore(cell_trace,n_baseline_frames):
    # cell_trace is going to be all the trials of this one cell
    # {freq: intensity: repetition: trace = [x,x,x,x,...]}}}

    active = False

    # get our average trace
    avg_trace = get_high_intensity_avg(cell_trace)

    # convert it to z scores
    # avg_trace_zscores = zscore(avg_trace)

    onset = round(EPOCH_START_IN_MS/1000 * FRAMERATE * -1) # how many extra frames we have at the beginning before our stim onset
    
    baseline = avg_trace[0:onset]
    baseline_mean = np.average(baseline)
    baseline_std = np.std(baseline)

    if baseline_std!=0:
        zscorer = lambda x: (x-baseline_mean)/baseline_std
    else:
        zscorer = lambda x: x


    response = avg_trace[n_baseline_frames:]
    zscore_response = np.array([zscorer(xi) for xi in response])
    # print(zscore_response)
    # input()
    # all_trials_of_this_intensity.append(zscore_response)

    # divide it into baseline and response

    # get the peak of the response
    peak_response = np.amax(zscore_response)

    # get the index of the peak response
    peak_response_idx = np.argmax(zscore_response)

    if (peak_response > ZSCORE_THRESHOLD) and (peak_response_idx < 10):
        active = True

    return active
    

def check_all_cells(cell_dictionary,n_baseline_frames):
    # INPUT: Dictionary of cells with trace activity stored in key "traces" in each cell
    # OUTPUT: Dictionary of cells with an added key "active" storing T/F depending whether it is an active cell or not
    
    for cell in cell_dictionary:
        if (check_cell_STD(cell_dictionary[cell]['traces'],n_baseline_frames)):
            cell_dictionary[cell]['active'] = True
        else:
            cell_dictionary[cell]['active'] = False

    return cell_dictionary

def main():
    
    # import our epoched and formatted recordings
    # it's formatted like this: 
    # cell { traces { freq { intensity { repetition: trace = [x,x,x,x,...] }}}}
    with open(BASE_PATH + traces_file, 'rb') as f:
        cell_dictionary = pickle.load(f)

    # define some key variables we'll pass into our functions
    n_baseline_frames = round(EPOCH_START_IN_MS/1000 * FRAMERATE) * -1 # these are the frames we'll use as the baseline
    
    traces_with_active_boolean = check_all_cells(cell_dictionary,n_baseline_frames)

    # find the number of active cells
    counter = 0
    for cell in traces_with_active_boolean:
        if traces_with_active_boolean[cell]['active'] == True:
            counter += 1

    print("Number of total cells: ")
    print(len(cell_dictionary))
    print("Number of active cells: ")
    print(counter)

    with open(BASE_PATH+output_file,'wb') as f:
        pickle.dump(traces_with_active_boolean,f)

if __name__=='__main__':
    main()