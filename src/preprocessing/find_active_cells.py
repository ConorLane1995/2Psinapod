"""
Script to find which of the cells that were active are sound-responsive by evaluating the peak of a cell's trial averaged response compared to pre-trial baseline distribution
INPUT: Dictionary with the epoched traces
OUTPUT: Same dictionary but now with an added key "active" that holds a boolean (T if the cell was sound responsive)
AUTHOR: Veronica Tarka, January 2022, veronica.tarka@mail.mcgill.ca
"""

import numpy as np
import pickle
from scipy.stats import zscore
import json
import sys
import os

# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'/../../config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
TRACES_FILE = config['AnalysisFile']
OUTPUT_FILE = TRACES_FILE
FRAMERATE = config['RecordingFR']
EPOCH_START_IN_MS = config['EpochStart']
EPOCH_END_IN_MS = config['EpochEnd']

STD_THRESHOLD = 3 # number of standard deviations from baseline the peak response must be in order for the cell to be considered active
ZSCORE_THRESHOLD = 2 # number of zscores from the mean that the peak response must be from baseline in order for the cell to be considered active

def get_avg_trace(cell_trace):
    # cell_trace is going to be all the trials of this one cell
    # {freq: intensity: repetition: trace = [x,x,x,x,...]}}}

    # first we need to find how much space to allocate
    n_samples = 0
    n_trials = 0
    for freq in cell_trace:
        for intensity in cell_trace[freq]:
            for repetition in cell_trace[freq][intensity]:
                if n_trials == 0:
                    n_samples = len(cell_trace[freq][intensity][repetition])
                n_trials += 1
              
    summed_traces = np.zeros(shape=(n_trials,n_samples))

    counter = 0
    # let's get a sum of all our traces to average later
    for freq in cell_trace:
        for intensity in cell_trace[freq]:
            for repetition in cell_trace[freq][intensity]:
                summed_traces[counter,:] = cell_trace[freq][intensity][repetition]
                counter += 1

    return np.median(summed_traces,axis=0)


"""
Check whether a cell is responsive based on number of STDs the peak is from baseline
@param cell_trace: a single cell's trial activity (the contents of 'traces' in the big dictionary)
@param n_baseline_frames: the number of frames included in the trial epoch that preced the stimulus onset
@return T/F: true if the cell's peak response was sufficient STD from the baseline distribution
"""
def check_cell_STD(cell_trace,n_baseline_frames):

    this_cell_trace = get_avg_trace(cell_trace) # average all of the trials together

    # get the baseline for this trial
    baseline = this_cell_trace[0:n_baseline_frames]
    response = this_cell_trace[n_baseline_frames:]

    # get our threshold
    peak_threshold = np.mean(baseline) + STD_THRESHOLD*np.std(baseline)

    # get the peak response
    peak_response = np.amax(response)

    # if our peak response was above our threshold, return True
    if peak_response >= peak_threshold:
        return True
    else:
        return False

"""
Check if a cell is responsive based on number of z-scores the peak is from the distribution of the entire trace
@param cell_trace: a single cell's trial activity (the contents of 'traces' in the big dictionary)
@return T/F: true if the cell's peak response was sufficiently large z-score
"""
def check_cell_zscore(cell_trace):
    # cell_trace is going to be all the trials of this one cell
    # {freq: intensity: repetition: [x,x,x,x,...]}}}

    # get our average trace
    avg_trace = get_avg_trace(cell_trace)

    # convert it to z scores
    avg_trace_zscores = zscore(avg_trace)

    # divide it into baseline and response
    onset = round(EPOCH_START_IN_MS/1000 * FRAMERATE * -1) # how many extra frames we have at the beginning before our stim onset
    response = avg_trace_zscores[onset:]

    # get the peak of the response
    peak_response = np.amax(response)

    if peak_response > ZSCORE_THRESHOLD:
        return True
    else: 
        return False

"""
Iterate through each cell and check whether it is sound responsive using either the STD method or z-score method
@param cell_dictionary: dictionary of cells with trace activity stored in key "traces" in each cell
@param n_baseline_frames: the number of frames included in the trial epoch that preced the stimulus onset
@return cell_dictionary: same dictionary as was input except with new key 'active' that contains T/F for whether the cell was responsive or not
""" 
def check_all_cells(cell_dictionary,n_baseline_frames):
   
    for cell in cell_dictionary:
        if (check_cell_STD(cell_dictionary[cell]['traces'],n_baseline_frames)):
            cell_dictionary[cell]['active'] = True
        else:
            cell_dictionary[cell]['active'] = False

    return cell_dictionary

def main():
    # import our epoched and formatted recordings
    # it's formatted like this: 
    # cell { 'traces' { freq { intensity { repetition: [x,x,x,x,...] }}}}
    with open(BASE_PATH + TRACES_FILE, 'rb') as f:
        cell_dictionary = pickle.load(f)

    # define some key variables we'll pass into our functions
    n_baseline_frames = round(EPOCH_START_IN_MS/1000 * FRAMERATE) * -1 # these are the frames we'll use as the baseline
    
    traces_with_active_boolean = check_all_cells(cell_dictionary,n_baseline_frames)

    # find the number of active cells
    counter = 0
    for cell in traces_with_active_boolean:
        if traces_with_active_boolean[cell]['active'] == True:
            counter += 1

    print("Number of total cells: ")
    print(len(cell_dictionary))
    print("Number of active cells: ")
    print(counter)

    with open(BASE_PATH+OUTPUT_FILE,'wb') as f:
        pickle.dump(traces_with_active_boolean,f)

if __name__=='__main__':
    main()