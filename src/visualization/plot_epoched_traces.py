import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import random
import json

# load what we need from the config file
with open('/Users/veronica/2Psinapod/config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
# csv_path = config['Triggers'] # name of CSV (assumed to be in the folder given in line above) with the trigger voltages over the recording
# conditions_path = config['Conditions'] # name of the CSV (assumed to be in folder given two lines above) with the condition types of each trial (freq, intensity, etc)
# output_path = config['AnalysisFile'] # name of the file that all of the analysis is getting saved in (tuning, best frequency, etc)
# STIMULUS_FRAMERATE = config['TriggerFR']
# TRIGGER_DELAY_IN_MS = config['TriggerDelay'] # delay between TDT sending a trigger and the stimulus actually happening
RECORDING_FRAMERATE = config['RecordingFR']
EPOCH_START_IN_MS = config['EpochStart']
# EPOCH_END_IN_MS = config['EpochEnd']

N_TRIAL_SAMPLES = 10 # number of trials (randomly selected) to show 
N_CELL_SAMPLES = 5 # number of cells (randomly selected) to show

def plot_trials(epoched_traces,n_trial_samples,n_cell_samples):
    # epoched traces is an nCell x nTrial x nFrame matrix

    fig, axs = plt.subplots(nrows=n_trial_samples, ncols=1)

    # get a random sampling of 10 cells
    cell_sample = random.sample(range(len(epoched_traces)),n_cell_samples)

    # get a random sampling of trials
    trial_sample = random.sample(range(len(epoched_traces[0])),n_trial_samples)

    for trial in range(n_trial_samples):

        # for each cell we've sampled
        for cell in range(n_cell_samples):

            axs[trial].plot(epoched_traces[cell_sample[cell],trial_sample[trial],:])


        if trial == 0:
            axs[trial].set_title("Random sampling of cells and trials from the current recording")
            
        if trial != n_trial_samples-1:
            axs[trial].get_xaxis().set_visible(False)
            axs[trial].get_yaxis().set_visible(False)
        else:
            axs[trial].set_xlabel("Time since stimulus onset (ms)")

        # add a line to show exactly where stimulus happened
        # epoching started 100 ms before the trigger
        # so have an extra 0.1s * RECORDING_FRAMERATE frames before the trigger
        axs[trial].vlines(EPOCH_START_IN_MS/-1000*RECORDING_FRAMERATE,0,100)

        # set the limits on the axes
        axs[trial].set_ylim([0,100])
        # axs[trial].set_xlim([0,0])

        # set the xticks so we're seeing the time
        # axs[trial].set_xticks(range(1,20,5),range(0,2000,500))
        axs[trial].set_yticks([0,100])
        
    plt.show(block=False)

def plot_all_traces(fl,onsets):
    fig = plt.figure(2)
    for i in range(len(fl)):
        plt.plot(fl[i,:]) #,label=i)

    # plt.legend(loc="upper left")
    plt.vlines(onsets,0,1000,linewidth=2)
    plt.show()

def main():
    # load epoched traces (saved in the course of the epoch_recording.py script)
    epoched_traces = np.load(BASE_PATH+"epoched_traces.npy",allow_pickle=True)
    raw_traces = np.load(BASE_PATH+"raw_corrected_traces.npy",allow_pickle=True)
    onsets = np.load(BASE_PATH+"onsets.npy",allow_pickle=True)

    plot_trials(epoched_traces,N_TRIAL_SAMPLES,N_CELL_SAMPLES)
    plot_all_traces(raw_traces,onsets)

if __name__=='__main__':
    main()