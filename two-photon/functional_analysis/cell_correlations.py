import numpy as np
import pandas as pd
import pickle
import os
import json


# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'/../../config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
traces_file = config['AnalysisFile']
coeffs_file = "corrcoefs.pkl"

def get_active_cells(traces):

    # going to return a dictionary with only active cells, formatted exactly the same as traces

    d = dict.fromkeys(traces.keys())

    for cell in traces:
        if traces[cell]['active'] == True:
            d[cell] = traces[cell]
        else:
            d.pop(cell,None)

    return d

def get_entire_trace(cell):
    traces = cell["traces"]

    entire_trace = []
    for freq in traces:
        for intensity in traces[freq]:
            for repetition in traces[freq][intensity]:
                entire_trace.append(traces[freq][intensity][repetition])

    et = np.array(entire_trace)
    et = np.reshape(et,-1)
    return et


def format_for_corrcoef(cell_dict):
    # each column is a single observation (trace)
    # each row is a variable (cell)

    data = []
    for cell in cell_dict:
        data.append(get_entire_trace(cell_dict[cell]))

    data = np.array(data)
    return data



def main():
    # load our dictionary
    with open(BASE_PATH + traces_file, 'rb') as f:
        cell_dict = pickle.load(f)

    # get only the active cells
    active_cell_dict = cell_dict #get_active_cells(cell_dict)

    active_cell_dict_formatted = format_for_corrcoef(active_cell_dict)
    # print(active_cell_dict_formatted)

    corr_matrix = np.corrcoef(active_cell_dict_formatted)

    with open(BASE_PATH+coeffs_file,"wb") as f:
        pickle.dump(corr_matrix,f)

if __name__=="__main__":
    main()